用nodejs实现：给定一段js的proto解析代码字符串，还原出protobuf的message定义。
"e.decode=function(e,r){e instanceof p||(e=p.create(e));for(var a=void 0===r?e.len:e.pos+r,n=new d.serverProto.Treasure;e.pos<a;){var s=e.uint32();switch(s>>>3){case 1:n.Index=e.string();break;case 2:n.MinVip=e.int32();break;case 3:n.Exp=e.double();break;case 4:n.IsOpen=e.bool();break;default:e.skipType(7&s)}}return n}"
    可以还原出如下proto定义：
    message Treasure {
        string Index = 1;
        int32 MinVip = 2;
        double Exp = 3;
        bool IsOpen = 4;
    }


function extractProtoDefinition(protoString) {
    // 正则表达式匹配 case 语句中的内容
    const caseRegex = /case (\d+):\s*n\.(\w+)=(e\.(\w+)\(\));/g;
    const fields = [];
    let match;

    // 类型映射表
    const typeMapping = {
        'string': 'string',
        'int32': 'int32',
        'uint32': 'uint32',
        'double': 'double',
        'bool': 'bool'
    };

    while ((match = caseRegex.exec(protoString)) !== null) {
        const id = match[1];
        const fieldName = match[2];
        const functionName = match[4];

        // 根据函数名称推断字段类型
        const type = typeMapping[functionName] || 'unknown'; // 未知类型

        fields.push({ type, name: fieldName, id });
    }

    // 构造 Protobuf message 定义
    let protoDefinition = `message Treasure {\n`;
    fields.forEach(field => {
        protoDefinition += `    ${field.type} ${field.name} = ${field.id};\n`;
    });
    protoDefinition += `}\n`;

    return protoDefinition;
}

// 给定的 proto 解析代码字符串
const protoCodeString = "e.decode=function(e,r){e instanceof p||(e=p.create(e));for(var a=void 0===r?e.len:e.pos+r,n=new d.serverProto.Treasure;e.pos<a;){var s=e.uint32();switch(s>>>3){case 1:n.Index=e.string();break;case 2:n.MinVip=e.int32();break;case 3:n.Exp=e.double();break;case 4:n.IsOpen=e.bool();break;default:e.skipType(7&s)}}return n}";

// 提取并输出 Protobuf 定义
const protoDefinition = extractProtoDefinition(protoCodeString);
console.log(protoDefinition);


//
